{"version":3,"sources":["services/fetchCurrencies.js","redux/actions/index.js","redux/reducers/user.js","redux/reducers/wallet.js","redux/reducers/index.js","redux/store.js","components/LoginForm.js","pages/Login.js","components/Header.js","components/WalletForm.js","components/Table.js","pages/Wallet.js","App.js","serviceWorker.js","index.js"],"names":["fetch","response","json","data","fetchCurrencies","INITIAL_STATE","email","user","state","action","type","payload","currencies","expenses","editor","idToEdit","expenseToEdit","error","updatedExpenses","allExpenses","edited","wallet","filter","id","find","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","window","Cypress","LoginForm","onInputChange","target","setState","name","value","length","validateEmail","handleSubmit","e","preventDefault","props","userLogin","history","push","match","buttonDisabled","this","onSubmit","className","htmlFor","onChange","data-testid","disabled","Component","connect","dispatch","Login","React","Header","totalExpenses","reduce","acc","curr","exchangeRates","currency","ask","toFixed","to","defaultProps","method","tag","description","WalletForm","handleChange","event","saveNewExpense","editExpense","saveCurrencies","getCurrencies","map","key","maxLength","USDT","Object","keys","expense","newExpenseAction","Table","deleteExpense","Number","onClick","Wallet","App","exact","path","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.8913a178.chunk.js","sourcesContent":["async function fetchCurrencies() {\n  const ENDPOINT = 'https://economia.awesomeapi.com.br/json/all';\n  try {\n    const response = await fetch(ENDPOINT);\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    return error;\n  }\n}\n\nexport default fetchCurrencies;\n","import fetchCurrencies from '../../services/fetchCurrencies';\n\nexport const USER_LOGIN = 'USER_LOGIN';\nexport const SAVE_CURRENCIES = 'SAVE_CURRENCIES';\nexport const SAVE_NEW_EXPENSE = 'SAVE_NEW_EXPENSE';\nexport const DELETE_EXPENSE = 'DELETE_EXPENSE';\nexport const EDIT_EXPENSE = 'EDIT_EXPENSE';\nexport const SAVE_EDITED_EXPENSE = 'SAVE_EDITED_EXPENSE';\nexport const FAILED_REQUEST = 'FAILED_REQUEST';\n\nexport const userLogin = (payload) => ({\n  type: USER_LOGIN,\n  payload,\n});\n\nexport const saveCurrencies = (payload) => ({\n  type: SAVE_CURRENCIES,\n  payload,\n});\n\nexport const saveNewExpense = (payload) => ({\n  type: SAVE_NEW_EXPENSE,\n  payload,\n});\n\nexport const getCurrencies = () => async (dispatch) => {\n  const currencies = await fetchCurrencies();\n  delete currencies.USDT;\n  dispatch(saveCurrencies(Object.keys(currencies)));\n};\n\nexport const newExpense = (expense) => async (dispatch) => {\n  const currencies = await fetchCurrencies();\n  dispatch(saveNewExpense({\n    ...expense,\n    exchangeRates: currencies,\n  }));\n};\n\nexport const deleteExpense = (payload) => ({\n  type: DELETE_EXPENSE,\n  payload,\n});\n\nexport const editExpense = (payload) => ({\n  type: EDIT_EXPENSE,\n  payload,\n});\n\nexport const saveEditedExpense = (payload) => ({\n  type: SAVE_EDITED_EXPENSE,\n  payload,\n});\n","import { USER_LOGIN } from '../actions';\n\nconst INITIAL_STATE = {\n  email: 'asd',\n};\n\nfunction user(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case USER_LOGIN:\n    return {\n      ...state,\n      email: action.payload,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","import {\n  DELETE_EXPENSE,\n  EDIT_EXPENSE,\n  SAVE_CURRENCIES,\n  SAVE_NEW_EXPENSE,\n  SAVE_EDITED_EXPENSE,\n} from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  editor: false,\n  idToEdit: 0,\n  expenseToEdit: {},\n  error: null,\n};\n\nconst updatedExpenses = (allExpenses, idToEdit, edited) => {\n  allExpenses[idToEdit] = edited;\n  return allExpenses;\n};\n\nfunction wallet(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case SAVE_CURRENCIES:\n    return {\n      ...state,\n      currencies: action.payload,\n    };\n  case SAVE_NEW_EXPENSE:\n    return {\n      ...state,\n      expenses: [...state.expenses, action.payload],\n    };\n  case DELETE_EXPENSE:\n    return {\n      ...state,\n      expenses: state.expenses.filter(({ id }) => id !== action.payload),\n    };\n  case EDIT_EXPENSE:\n    return {\n      ...state,\n      editor: true,\n      idToEdit: action.payload,\n      expenseToEdit: state.expenses.find(({ id }) => id === action.payload),\n    };\n  case SAVE_EDITED_EXPENSE:\n    return {\n      ...state,\n      editor: false,\n      expenses: [\n        ...updatedExpenses(state.expenses, state.idToEdit, action.payload),\n      ],\n      idToEdit: 0,\n      expenseToEdit: {},\n    };\n  default:\n    return state;\n  }\n}\n\nexport default wallet;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({\n  user,\n  wallet,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { IoIosWallet, IoIosMail, IoMdKey } from 'react-icons/io';\nimport { userLogin as loginAction } from '../redux/actions';\n\nclass LoginForm extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      buttonDisabled: true,\n    };\n  }\n\n  onInputChange = ({ target }) => {\n    const MIN_PASS_LENGTH = 6;\n    const { email } = this.state;\n    this.setState({\n      [target.name]: target.value,\n      buttonDisabled:\n        !(target.value.length >= MIN_PASS_LENGTH\n        && this.validateEmail(email)),\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { userLogin, history } = this.props;\n    const { email } = this.state;\n    userLogin(email);\n    history.push('/carteira');\n  };\n\n  validateEmail = (email) => {\n    const mailFormat = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/;\n    return email.match(mailFormat);\n  };\n\n  render() {\n    const { buttonDisabled } = this.state;\n    return (\n      <form onSubmit={ this.handleSubmit } className=\"Login-Form\">\n        <div className=\"Login-Title\">\n          <IoIosWallet />\n          <h1>Wallet.</h1>\n        </div>\n        <label htmlFor=\"email\">\n          Email\n          <IoIosMail className=\"Icon\" />\n          <input\n            type=\"email\"\n            name=\"email\"\n            id=\"email\"\n            onChange={ this.onInputChange }\n            data-testid=\"email-input\"\n          />\n        </label>\n        <label htmlFor=\"password\">\n          Senha\n          <IoMdKey className=\"Icon\" />\n          <input\n            type=\"password\"\n            id=\"password\"\n            onChange={ this.onInputChange }\n            data-testid=\"password-input\"\n          />\n        </label>\n        <button type=\"submit\" disabled={ buttonDisabled }>\n          Entrar\n        </button>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  userLogin: (email) => dispatch(loginAction(email)),\n});\n\nLoginForm.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  userLogin: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(LoginForm);\n","import React from 'react';\nimport LoginForm from '../components/LoginForm';\nimport '../styles/Login.css';\n\nclass Login extends React.Component {\n  render() {\n    return (\n      <main className=\"Login-Container\">\n        <LoginForm { ...this.props } />\n      </main>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { IoIosWallet, IoMdPerson } from 'react-icons/io';\nimport '../styles/Header.css';\nimport { Redirect } from 'react-router-dom';\n\nclass Header extends Component {\n  totalExpenses = () => {\n    const { expenses } = this.props;\n    const totalValue = expenses.reduce(\n      (acc, curr) => acc + curr.exchangeRates[curr.currency].ask * curr.value,\n      0,\n    );\n    return totalValue.toFixed(2);\n  };\n\n  render() {\n    const { email } = this.props;\n    if (email === '') return <Redirect to=\"/login\" />;\n    return (\n      <header className=\"Header\">\n        <div className=\"Title\">\n          <IoIosWallet />\n          <h1>Wallet.</h1>\n        </div>\n        <div className=\"Header-Informations\">\n          <div>\n            <span>R$</span>\n            <p data-testid=\"total-field\">{this.totalExpenses()}</p>\n            <p data-testid=\"header-currency-field\">BRL</p>\n          </div>\n          <div>\n            <IoMdPerson />\n            <p data-testid=\"email-field\">{email}</p>\n          </div>\n        </div>\n      </header>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  expenses: state.wallet.expenses,\n});\n\nHeader.defaultProps = {\n  email: '',\n};\n\nHeader.propTypes = {\n  email: PropTypes.string,\n  expenses: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n};\n\nexport default connect(mapStateToProps)(Header);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport {\n  getCurrencies as getCurrenciesThunk,\n  newExpense as newExpenseAction,\n  saveEditedExpense as saveEditedExpenseAction,\n} from '../redux/actions';\nimport '../styles/WalletForm.css';\n\nconst INITIAL_STATE = {\n  id: 0,\n  value: '',\n  currency: 'USD',\n  method: 'Dinheiro',\n  tag: 'Alimentação',\n  description: '',\n};\n\nclass WalletForm extends Component {\n  constructor() {\n    super();\n    this.state = INITIAL_STATE;\n  }\n\n  componentDidMount() {\n    this.saveCurrencies();\n  }\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { saveNewExpense, editor, editExpense, expenseToEdit } = this.props;\n    if (editor) {\n      editExpense({ ...expenseToEdit, ...this.state, id: expenseToEdit.id });\n    } else {\n      saveNewExpense(this.state);\n      this.setState(({ id }) => ({ ...INITIAL_STATE, id: id + 1 }));\n    }\n  };\n\n  saveCurrencies = async () => {\n    const { getCurrencies } = this.props;\n    getCurrencies();\n  };\n\n  render() {\n    const { currencies, editor } = this.props;\n    const { value, currency, method, tag, description } = this.state;\n    return (\n      <form onSubmit={ this.handleSubmit } className=\"Wallet-Form\">\n        <div className=\"Value-Currency\">\n          <label htmlFor=\"valueInput\">\n            Valor\n            <input\n              type=\"number\"\n              name=\"value\"\n              id=\"valueInput\"\n              value={ value }\n              onChange={ this.handleChange }\n              data-testid=\"value-input\"\n            />\n          </label>\n          <label htmlFor=\"currency\">\n            Moeda\n            <select\n              name=\"currency\"\n              id=\"currency\"\n              value={ currency }\n              onChange={ this.handleChange }\n              data-testid=\"currency-input\"\n            >\n              {currencies.map((curr) => (\n                <option key={ curr }>{curr}</option>\n              ))}\n            </select>\n          </label>\n        </div>\n        <label htmlFor=\"method\">\n          Pagamento\n          <select\n            name=\"method\"\n            id=\"method\"\n            value={ method }\n            onChange={ this.handleChange }\n            data-testid=\"method-input\"\n          >\n            <option>Dinheiro</option>\n            <option>Cartão de crédito</option>\n            <option>Cartão de débito</option>\n          </select>\n        </label>\n        <label htmlFor=\"tag\">\n          Categoria\n          <select\n            name=\"tag\"\n            id=\"tag\"\n            value={ tag }\n            onChange={ this.handleChange }\n            data-testid=\"tag-input\"\n          >\n            <option>Alimentação</option>\n            <option>Lazer</option>\n            <option>Trabalho</option>\n            <option>Transporte</option>\n            <option>Saúde</option>\n          </select>\n        </label>\n        <label htmlFor=\"descInput\">\n          Descrição\n          <input\n            type=\"text\"\n            id=\"descInput\"\n            name=\"description\"\n            maxLength=\"180\"\n            value={ description }\n            onChange={ this.handleChange }\n            data-testid=\"description-input\"\n          />\n        </label>\n        {editor ? (\n          <button type=\"submit\">Editar despesa</button>\n        ) : (\n          <button\n            type=\"submit\"\n            disabled={ !(value.length > 0 && description.length > 0) }\n          >\n            Adicionar despesa\n          </button>\n        )}\n      </form>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currencies: state.wallet.currencies,\n  editor: state.wallet.editor,\n  expenseToEdit: state.wallet.expenseToEdit,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCurrencies: () => dispatch(getCurrenciesThunk()),\n  saveNewExpense: (expense) => dispatch(newExpenseAction(expense)),\n  editExpense: (expense) => dispatch(saveEditedExpenseAction(expense)),\n});\n\nWalletForm.propTypes = {\n  getCurrencies: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n  editor: PropTypes.bool.isRequired,\n  expenseToEdit: PropTypes.shape({\n    id: PropTypes.number,\n    value: PropTypes.string,\n    currency: PropTypes.string,\n    method: PropTypes.string,\n    tag: PropTypes.string,\n    description: PropTypes.string,\n  }).isRequired,\n  saveNewExpense: PropTypes.func.isRequired,\n  editExpense: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WalletForm);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { FaTrashAlt, FaPencilAlt } from 'react-icons/fa';\nimport {\n  deleteExpense as deleteExpenseAction,\n  editExpense as editExpenseAction,\n} from '../redux/actions';\nimport '../styles/Table.css';\n\nclass Table extends Component {\n  render() {\n    const { expenses, deleteExpense, editExpense } = this.props;\n    return (\n      <div className=\"Table-Container\">\n        <table>\n          <thead>\n            <tr>\n              <th>Descrição</th>\n              <th>Tag</th>\n              <th>Método de pagamento</th>\n              <th>Valor</th>\n              <th>Moeda</th>\n              <th>Câmbio utilizado</th>\n              <th>Valor convertido</th>\n              <th>Moeda de conversão</th>\n              <th>Editar/Excluir</th>\n            </tr>\n          </thead>\n          <tbody>\n            {expenses.map(\n              ({\n                id,\n                description,\n                tag,\n                method,\n                value,\n                exchangeRates,\n                currency,\n              }) => (\n                <tr key={ id }>\n                  <td>{description}</td>\n                  <td>{tag}</td>\n                  <td>{method}</td>\n                  <td>{Number(value).toFixed(2)}</td>\n                  <td>{exchangeRates[currency].name}</td>\n                  <td>{Number(exchangeRates[currency].ask).toFixed(2)}</td>\n                  <td>{(value * exchangeRates[currency].ask).toFixed(2)}</td>\n                  <td>Real</td>\n                  <td>\n                    <div className=\"Buttons-Container\">\n                      <button\n                        id={ id }\n                        type=\"button\"\n                        onClick={ () => editExpense(id) }\n                        data-testid=\"edit-btn\"\n                      >\n                        <FaPencilAlt />\n                      </button>\n                      <button\n                        id={ id }\n                        type=\"button\"\n                        onClick={ () => deleteExpense(id) }\n                        data-testid=\"delete-btn\"\n                      >\n                        <FaTrashAlt />\n                      </button>\n                    </div>\n                  </td>\n                </tr>\n              ),\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  expenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  deleteExpense: (id) => dispatch(deleteExpenseAction(id)),\n  editExpense: (id) => dispatch(editExpenseAction(id)),\n});\n\nTable.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.shape({})).isRequired,\n  deleteExpense: PropTypes.func.isRequired,\n  editExpense: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\nimport Header from '../components/Header';\nimport WalletForm from '../components/WalletForm';\nimport Table from '../components/Table';\n\nclass Wallet extends React.Component {\n  render() {\n    return (\n      <div className=\"Wallet-Container\">\n        <Header />\n        <main className=\"Wallet\">\n          <WalletForm />\n          <Table />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default Wallet;\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/carteira\" component={ Wallet } />\n      <Route path=\"*\" component={ Login } />\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nReactDOM.render(\n  <HashRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </HashRouter>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}